# Some solid inspriation borrowed from https://github.com/mediadepot/docker-flatcar-developer/blob/master/.github/workflows/build.yaml
name: Build
env:
  PROJECT_NAME: flatcar-zfs-overlay
on:
  schedule:
    # Every day at 4am
    - cron: '0 4 * * *'
  workflow_dispatch:
jobs:
  info:
    outputs:
      FLATCAR_VERSION: ${{ steps.curl.outputs.FLATCAR_VERSION }}
    runs-on: ubuntu-latest
    steps:
    - id: curl
      run: curl -L https://stable.release.flatcar-linux.net/amd64-usr/current/version.txt | xargs -n1 echo | tee -a "${GITHUB_OUTPUT}"

  check:
    needs: info
    outputs:
      image_exists: ${{ steps.image.outputs.exists }}
    runs-on: ubuntu-latest
    steps:
    - id: image
      run: |
        FLATCAR_VERSION=${{ needs.info.outputs.FLATCAR_VERSION }};

        # public token
        TOKEN=$(curl --silent https://ghcr.io/token\?scope\="repository:${{ github.repository }}:pull" | jq -r .token)

        # private token
        # TOKEN=$(echo -n ${{ secrets.GITHUB_TOKEN }} | base64)

        url="https://ghcr.io/v2/${{ github.repository }}/manifests/${FLATCAR_VERSION}";
        status=$(curl -H "Authorization: Bearer ${TOKEN}" -o /dev/null -w "%{http_code}" --silent $url);
        if [ "$status" == 200 ]; then
          echo "Image ${{ github.repository }}:${FLATCAR_VERSION} already exists"
          echo "exists=true" >> "$GITHUB_OUTPUT";
        else
          echo "Image ${{ github.repository }}:${FLATCAR_VERSION} not found at $url ($status)"
          echo "exists=false" >> "$GITHUB_OUTPUT";
        fi
    - uses: actions/checkout@v2
    - uses: gautamkrishnar/keepalive-workflow@1.1.0

  build:
    needs: [ info, check ]
    if: ${{ !needs.check.outputs.image_exists }}
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      # e.g. cjewett/flatcar-zfs-overlay
      IMAGE_NAME: ${{ github.repository }}
    permissions:
      contents: read
      packages: write
    steps:
    - run: make FLATCAR_VERSION=${{needs.info.outputs.FLATCAR_VERSION}}
    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish
      run: |
        docker image tag ${{ env.PROJECT_NAME }}:${{needs.info.outputs.FLATCAR_VERSION}} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{needs.info.outputs.FLATCAR_VERSION}}
        docker image push --all-tags ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
